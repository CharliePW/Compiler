exec (acomp a) (0,s,[]) == (length (acomp a), s, [aval a s])

Proof:
--TODO Task 4

LEFT HAND SIDE

exec (acomp a) (0,s,[])


Base Case 1:

let a = N n 

[applying acomp]     = exec [LOADI n] (0,s,[])
[applying exec]      = (1, s, [n])
[unapplying aval]    = (1, s, [aval (N n) s])
[unapplying counter] = (length (acomp (N n)), s, [aval (N n) s])

Applying N n into a prove that exec (acomp a) (0,s,[]) == (length (acomp a), s, [aval a s])


Base Case 2:

let a = V x

[applying acomp]     = exec [LOAD x] (0,s,[])
[applying exec]      = (1, s, [n])
[unapplying aval]    = (1, s, [aval (V x) s])
[unapplying counter] = (length (acomp (V x), s, [aval (V x) s])

Applying V x into a prove that exec (acomp a) (0,s,[]) == (length (acomp a), s, [aval a s])


Proof by Induction:

Let a = Plus a1 a2 

    [applying acomp]          = exec (acomp a1 ++ acomp a2 ++ [ADD]) (0, s, [])
[associativity of acomp]      = exec (acomp a1 ++ (acomp a2 ++ [ADD])) (0, s, [])
    [distributivity]          = exec (acomp a2 ++ [ADD]) (exec (acomp a1) (0, s, []))
[Induction hypothesis for a1] = exec (acomp a2 ++ [ADD]) (1, s, [aval a1 s])
    [distributivity]          = exec [ADD] (exec (acomp a2) (1, s, [aval a1 s])
[Induction hypothesis for a2] = exec [ADD] (2, s, [aval a2 s, aval a1 s ])
    [applying exec]           = (3, s, [aval a2 s + aval a2 s])
    [unapplying aval]         = (3, s, [aval (Plus a1 a2) s])
    [unapplying counter]      = (length (acomp (Plus a1 a2), s, [aval (Plus a1 a2) s]))

Applying "Plus a1 a2" into the equation, proves by induction that exec (acomp a) (0,s,[]) == (length (acomp a), s, [aval a s])

